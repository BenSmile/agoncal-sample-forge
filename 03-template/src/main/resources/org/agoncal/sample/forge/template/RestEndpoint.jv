package org.jboss.forge.spec.javaee.rest;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriBuilder;

/**
 * 
 */
@Stateless
@Path("${resourcePath}")
public class ${entity}Endpoint
{
   @PersistenceContext(unitName="${entity}-pu")
   private EntityManager em;

   @POST
   @Consumes("${contentType}")
   public Response create(${entity} dto)
   {
      ${entity} entity = dto.fromDTO(null, em);
      em.persist(entity);
      return Response.created(UriBuilder.fromResource(${entity}Endpoint.class).path(String.valueOf(entity.getId())).build()).build();
   }

   @DELETE
   @Path("/{id:[0-9][0-9]*}")
   public Response deleteById(@PathParam("id") Long id)
   {
      ${entity} entity = em.find(${entity}.class, id);
      if (entity == null) {
        return Response.status(Status.NOT_FOUND).build();
      }
      em.remove(entity);
      return Response.noContent().build();
   }

   @GET
   @Path("/{id:[0-9][0-9]*}")
   @Produces("${contentType}")
   public Response findById(@PathParam("id") Long id)
   {
      TypedQuery<${entity}> findByIdQuery = em.createQuery("Select entity from ${entity} entity", ${entity}.class);
      findByIdQuery.setParameter("entityId", id);
      ${entity} entity;
      try {
         entity = findByIdQuery.getSingleResult();
      } catch (NoResultException nre) {
         entity = null;
      }
      if (entity == null) {
        return Response.status(Status.NOT_FOUND).build();
      }
      ${entity} dto = new ${entity}(entity);
      return Response.ok(dto).build();
   }

   @PUT
   @Path("/{id:[0-9][0-9]*}")
   @Consumes("${contentType}")
   public Response update(@PathParam("id") Long id, ${entity} dto)
   {
      TypedQuery<${entity}> findByIdQuery = em.createQuery("Select entity from ${entity} entity", ${entity}.class);
      findByIdQuery.setParameter("entityId", id);
      ${entity} entity;
      try {
         entity = findByIdQuery.getSingleResult();
      } catch (NoResultException nre) {
         entity = null;
      }
      entity = dto.fromDTO(entity, em);
      entity = em.merge(entity);
      return Response.noContent().build();
   }
}